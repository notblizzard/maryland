// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  displayname   String         @default("")
  username      String
  email         String         @unique
  description   String
  avatar        String         @default("")
  posts         Post[]
  hearts        Heart[]
  comments      Comment[]
  followers     Follow[]       @relation(name: "FollowingUser")
  following     Follow[]       @relation(name: "FollowerUser")
  notifications Notification[]
  directs       Direct[]
  messages      Message[]
}

model Post {
  id            Int            @id @default(autoincrement())
  user          User           @relation(fields: [userId], references: [id])
  createdAt     DateTime       @default(now())
  userId        Int
  description   String?
  image         String
  hearts        Heart[]
  comments      Comment[]
  notifications Notification[]
}

model Heart {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  userId    Int
  postId    Int
}

model Comment {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id])
  post          Post           @relation(fields: [postId], references: [id])
  userId        Int
  postId        Int
  text          String
  notifications Notification[]
}

model Follow {
  id          Int  @id @default(autoincrement())
  follower    User @relation(fields: [followerId], references: [id], name: "FollowerUser")
  followerId  Int
  following   User @relation(fields: [followingId], references: [id], name: "FollowingUser")
  followingId Int
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  type      String
  read      Boolean  @default(false)
  postId    Int?
  commentId Int?
  post      Post?    @relation(fields: [postId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])
}

model Direct {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   User[]
  messages  Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String   @default("")
  direct    Direct   @relation(fields: [directId], references: [id])
  directId  Int
}
